/*
 * Unity Catalog API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.unitycatalog.server.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.unitycatalog.server.model.ColumnInfos;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Metadata
 */
@JsonPropertyOrder({
  Metadata.JSON_PROPERTY_DELTA_TABLE_ID,
  Metadata.JSON_PROPERTY_NAME,
  Metadata.JSON_PROPERTY_DESCRIPTION,
  Metadata.JSON_PROPERTY_PROVIDER,
  Metadata.JSON_PROPERTY_FORMAT_OPTIONS,
  Metadata.JSON_PROPERTY_SCHEMA,
  Metadata.JSON_PROPERTY_PARTITION_COLUMNS,
  Metadata.JSON_PROPERTY_PROPERTIES,
  Metadata.JSON_PROPERTY_CREATED_TIME
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.5.0")
public class Metadata {
  public static final String JSON_PROPERTY_DELTA_TABLE_ID = "delta_table_id";
  private String deltaTableId;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  private String description;

  public static final String JSON_PROPERTY_PROVIDER = "provider";
  private String provider;

  public static final String JSON_PROPERTY_FORMAT_OPTIONS = "format_options";
  private Object formatOptions;

  public static final String JSON_PROPERTY_SCHEMA = "schema";
  private ColumnInfos schema;

  public static final String JSON_PROPERTY_PARTITION_COLUMNS = "partition_columns";
  private List<String> partitionColumns = new ArrayList<>();

  public static final String JSON_PROPERTY_PROPERTIES = "properties";
  private Map<String, String> properties = new HashMap<>();

  public static final String JSON_PROPERTY_CREATED_TIME = "created_time";
  private String createdTime;

  public Metadata() {
  }

  public Metadata deltaTableId(String deltaTableId) {
    
    this.deltaTableId = deltaTableId;
    return this;
  }

   /**
   * The table ID (this is the internal table ID created by Delta).
   * @return deltaTableId
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DELTA_TABLE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDeltaTableId() {
    return deltaTableId;
  }


  @JsonProperty(JSON_PROPERTY_DELTA_TABLE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDeltaTableId(String deltaTableId) {
    this.deltaTableId = deltaTableId;
  }


  public Metadata name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * The table name.
   * @return name
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }


  public Metadata description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * The table comment (should be set if the comment changed).
   * @return description
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDescription(String description) {
    this.description = description;
  }


  public Metadata provider(String provider) {
    
    this.provider = provider;
    return this;
  }

   /**
   * The table provider.
   * @return provider
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PROVIDER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getProvider() {
    return provider;
  }


  @JsonProperty(JSON_PROPERTY_PROVIDER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProvider(String provider) {
    this.provider = provider;
  }


  public Metadata formatOptions(Object formatOptions) {
    
    this.formatOptions = formatOptions;
    return this;
  }

   /**
   * A map of key-value options attached to the entity.
   * @return formatOptions
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FORMAT_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Object getFormatOptions() {
    return formatOptions;
  }


  @JsonProperty(JSON_PROPERTY_FORMAT_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFormatOptions(Object formatOptions) {
    this.formatOptions = formatOptions;
  }


  public Metadata schema(ColumnInfos schema) {
    
    this.schema = schema;
    return this;
  }

   /**
   * Get schema
   * @return schema
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SCHEMA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ColumnInfos getSchema() {
    return schema;
  }


  @JsonProperty(JSON_PROPERTY_SCHEMA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSchema(ColumnInfos schema) {
    this.schema = schema;
  }


  public Metadata partitionColumns(List<String> partitionColumns) {
    
    this.partitionColumns = partitionColumns;
    return this;
  }

  public Metadata addPartitionColumnsItem(String partitionColumnsItem) {
    if (this.partitionColumns == null) {
      this.partitionColumns = new ArrayList<>();
    }
    this.partitionColumns.add(partitionColumnsItem);
    return this;
  }

   /**
   * The partition columns of the table (should be set if the partition columns changed).
   * @return partitionColumns
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PARTITION_COLUMNS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getPartitionColumns() {
    return partitionColumns;
  }


  @JsonProperty(JSON_PROPERTY_PARTITION_COLUMNS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPartitionColumns(List<String> partitionColumns) {
    this.partitionColumns = partitionColumns;
  }


  public Metadata properties(Map<String, String> properties) {
    
    this.properties = properties;
    return this;
  }

  public Metadata putPropertiesItem(String key, String propertiesItem) {
    if (this.properties == null) {
      this.properties = new HashMap<>();
    }
    this.properties.put(key, propertiesItem);
    return this;
  }

   /**
   * A map of key-value properties attached to the securable.
   * @return properties
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PROPERTIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, String> getProperties() {
    return properties;
  }


  @JsonProperty(JSON_PROPERTY_PROPERTIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProperties(Map<String, String> properties) {
    this.properties = properties;
  }


  public Metadata createdTime(String createdTime) {
    
    this.createdTime = createdTime;
    return this;
  }

   /**
   * The time this metadata action was created (this is generated by the Delta client writing to the table).
   * @return createdTime
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CREATED_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCreatedTime() {
    return createdTime;
  }


  @JsonProperty(JSON_PROPERTY_CREATED_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCreatedTime(String createdTime) {
    this.createdTime = createdTime;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Metadata metadata = (Metadata) o;
    return Objects.equals(this.deltaTableId, metadata.deltaTableId) &&
        Objects.equals(this.name, metadata.name) &&
        Objects.equals(this.description, metadata.description) &&
        Objects.equals(this.provider, metadata.provider) &&
        Objects.equals(this.formatOptions, metadata.formatOptions) &&
        Objects.equals(this.schema, metadata.schema) &&
        Objects.equals(this.partitionColumns, metadata.partitionColumns) &&
        Objects.equals(this.properties, metadata.properties) &&
        Objects.equals(this.createdTime, metadata.createdTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deltaTableId, name, description, provider, formatOptions, schema, partitionColumns, properties, createdTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Metadata {\n");
    sb.append("    deltaTableId: ").append(toIndentedString(deltaTableId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    provider: ").append(toIndentedString(provider)).append("\n");
    sb.append("    formatOptions: ").append(toIndentedString(formatOptions)).append("\n");
    sb.append("    schema: ").append(toIndentedString(schema)).append("\n");
    sb.append("    partitionColumns: ").append(toIndentedString(partitionColumns)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    createdTime: ").append(toIndentedString(createdTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

