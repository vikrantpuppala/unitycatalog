/*
 * Unity Catalog API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.unitycatalog.server.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.unitycatalog.server.model.CommitInfo;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * GetCommits200Response
 */
@JsonPropertyOrder({
  GetCommits200Response.JSON_PROPERTY_COMMITS,
  GetCommits200Response.JSON_PROPERTY_LATEST_TABLE_VERSION
})
@JsonTypeName("getCommits_200_response")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.5.0")
public class GetCommits200Response {
  public static final String JSON_PROPERTY_COMMITS = "commits";
  private List<CommitInfo> commits = new ArrayList<>();

  public static final String JSON_PROPERTY_LATEST_TABLE_VERSION = "latest_table_version";
  private Long latestTableVersion;

  public GetCommits200Response() {
  }

  public GetCommits200Response commits(List<CommitInfo> commits) {
    
    this.commits = commits;
    return this;
  }

  public GetCommits200Response addCommitsItem(CommitInfo commitsItem) {
    if (this.commits == null) {
      this.commits = new ArrayList<>();
    }
    this.commits.add(commitsItem);
    return this;
  }

   /**
   * Get commits
   * @return commits
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COMMITS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<CommitInfo> getCommits() {
    return commits;
  }


  @JsonProperty(JSON_PROPERTY_COMMITS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCommits(List<CommitInfo> commits) {
    this.commits = commits;
  }


  public GetCommits200Response latestTableVersion(Long latestTableVersion) {
    
    this.latestTableVersion = latestTableVersion;
    return this;
  }

   /**
   * The latest tracked version.
   * @return latestTableVersion
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LATEST_TABLE_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getLatestTableVersion() {
    return latestTableVersion;
  }


  @JsonProperty(JSON_PROPERTY_LATEST_TABLE_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLatestTableVersion(Long latestTableVersion) {
    this.latestTableVersion = latestTableVersion;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetCommits200Response getCommits200Response = (GetCommits200Response) o;
    return Objects.equals(this.commits, getCommits200Response.commits) &&
        Objects.equals(this.latestTableVersion, getCommits200Response.latestTableVersion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(commits, latestTableVersion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetCommits200Response {\n");
    sb.append("    commits: ").append(toIndentedString(commits)).append("\n");
    sb.append("    latestTableVersion: ").append(toIndentedString(latestTableVersion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

