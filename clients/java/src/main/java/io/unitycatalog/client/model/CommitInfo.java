/*
 * Unity Catalog API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.unitycatalog.client.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * CommitInfo
 */
@JsonPropertyOrder({
  CommitInfo.JSON_PROPERTY_VERSION,
  CommitInfo.JSON_PROPERTY_TIMESTAMP,
  CommitInfo.JSON_PROPERTY_FILE_NAME,
  CommitInfo.JSON_PROPERTY_FILE_SIZE,
  CommitInfo.JSON_PROPERTY_FILE_MODIFICATION_TIMESTAMP,
  CommitInfo.JSON_PROPERTY_IS_DISOWN_COMMIT
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.5.0")
public class CommitInfo {
  public static final String JSON_PROPERTY_VERSION = "version";
  private Long version;

  public static final String JSON_PROPERTY_TIMESTAMP = "timestamp";
  private Long timestamp;

  public static final String JSON_PROPERTY_FILE_NAME = "file_name";
  private String fileName;

  public static final String JSON_PROPERTY_FILE_SIZE = "file_size";
  private Long fileSize;

  public static final String JSON_PROPERTY_FILE_MODIFICATION_TIMESTAMP = "file_modification_timestamp";
  private Long fileModificationTimestamp;

  public static final String JSON_PROPERTY_IS_DISOWN_COMMIT = "is_disown_commit";
  private Boolean isDisownCommit;

  public CommitInfo() { 
  }

  public CommitInfo version(Long version) {
    this.version = version;
    return this;
  }

   /**
   * The version of this commit.
   * @return version
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getVersion() {
    return version;
  }


  @JsonProperty(JSON_PROPERTY_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVersion(Long version) {
    this.version = version;
  }


  public CommitInfo timestamp(Long timestamp) {
    this.timestamp = timestamp;
    return this;
  }

   /**
   * The timestamp for when the commit was made.
   * @return timestamp
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TIMESTAMP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getTimestamp() {
    return timestamp;
  }


  @JsonProperty(JSON_PROPERTY_TIMESTAMP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTimestamp(Long timestamp) {
    this.timestamp = timestamp;
  }


  public CommitInfo fileName(String fileName) {
    this.fileName = fileName;
    return this;
  }

   /**
   * The filename of the UUID-based commit file.
   * @return fileName
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FILE_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFileName() {
    return fileName;
  }


  @JsonProperty(JSON_PROPERTY_FILE_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFileName(String fileName) {
    this.fileName = fileName;
  }


  public CommitInfo fileSize(Long fileSize) {
    this.fileSize = fileSize;
    return this;
  }

   /**
   * The size of the commit file in bytes.
   * @return fileSize
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FILE_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getFileSize() {
    return fileSize;
  }


  @JsonProperty(JSON_PROPERTY_FILE_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFileSize(Long fileSize) {
    this.fileSize = fileSize;
  }


  public CommitInfo fileModificationTimestamp(Long fileModificationTimestamp) {
    this.fileModificationTimestamp = fileModificationTimestamp;
    return this;
  }

   /**
   * The modification time of the commit file.
   * @return fileModificationTimestamp
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FILE_MODIFICATION_TIMESTAMP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getFileModificationTimestamp() {
    return fileModificationTimestamp;
  }


  @JsonProperty(JSON_PROPERTY_FILE_MODIFICATION_TIMESTAMP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFileModificationTimestamp(Long fileModificationTimestamp) {
    this.fileModificationTimestamp = fileModificationTimestamp;
  }


  public CommitInfo isDisownCommit(Boolean isDisownCommit) {
    this.isDisownCommit = isDisownCommit;
    return this;
  }

   /**
   * Indicates if this commit is a disown commit that removes UC as the commit coordinator from the table.
   * @return isDisownCommit
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IS_DISOWN_COMMIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIsDisownCommit() {
    return isDisownCommit;
  }


  @JsonProperty(JSON_PROPERTY_IS_DISOWN_COMMIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIsDisownCommit(Boolean isDisownCommit) {
    this.isDisownCommit = isDisownCommit;
  }


  /**
   * Return true if this CommitInfo object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CommitInfo commitInfo = (CommitInfo) o;
    return Objects.equals(this.version, commitInfo.version) &&
        Objects.equals(this.timestamp, commitInfo.timestamp) &&
        Objects.equals(this.fileName, commitInfo.fileName) &&
        Objects.equals(this.fileSize, commitInfo.fileSize) &&
        Objects.equals(this.fileModificationTimestamp, commitInfo.fileModificationTimestamp) &&
        Objects.equals(this.isDisownCommit, commitInfo.isDisownCommit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(version, timestamp, fileName, fileSize, fileModificationTimestamp, isDisownCommit);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CommitInfo {\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    fileName: ").append(toIndentedString(fileName)).append("\n");
    sb.append("    fileSize: ").append(toIndentedString(fileSize)).append("\n");
    sb.append("    fileModificationTimestamp: ").append(toIndentedString(fileModificationTimestamp)).append("\n");
    sb.append("    isDisownCommit: ").append(toIndentedString(isDisownCommit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `version` to the URL query string
    if (getVersion() != null) {
      joiner.add(String.format("%sversion%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getVersion()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `timestamp` to the URL query string
    if (getTimestamp() != null) {
      joiner.add(String.format("%stimestamp%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTimestamp()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `file_name` to the URL query string
    if (getFileName() != null) {
      joiner.add(String.format("%sfile_name%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getFileName()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `file_size` to the URL query string
    if (getFileSize() != null) {
      joiner.add(String.format("%sfile_size%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getFileSize()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `file_modification_timestamp` to the URL query string
    if (getFileModificationTimestamp() != null) {
      joiner.add(String.format("%sfile_modification_timestamp%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getFileModificationTimestamp()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `is_disown_commit` to the URL query string
    if (getIsDisownCommit() != null) {
      joiner.add(String.format("%sis_disown_commit%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getIsDisownCommit()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

