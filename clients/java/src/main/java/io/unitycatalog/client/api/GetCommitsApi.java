/*
 * Unity Catalog API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package io.unitycatalog.client.api;

import io.unitycatalog.client.ApiClient;
import io.unitycatalog.client.ApiException;
import io.unitycatalog.client.ApiResponse;
import io.unitycatalog.client.Pair;

import io.unitycatalog.client.model.GetCommits200Response;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.net.http.HttpRequest;
import java.nio.channels.Channels;
import java.nio.channels.Pipe;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.5.0")
public class GetCommitsApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public GetCommitsApi() {
    this(new ApiClient());
  }

  public GetCommitsApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * List Delta Commits
   * List all the delta commits. 
   * @param tableId The table id of the table to commit to. (required)
   * @param tableUri The URI of the storage location of the table. (required)
   * @param startVersion The start version from which to retrieve commits (inclusive). (required)
   * @param tableFullName The table full name, currently only used for verification. (optional)
   * @param maxNumCommits The maximum number of commits to return in the response. Defaults to 50 if not provided. (optional)
   * @return GetCommits200Response
   * @throws ApiException if fails to make API call
   */
  public GetCommits200Response getCommits(String tableId, String tableUri, Long startVersion, String tableFullName, Integer maxNumCommits) throws ApiException {
    ApiResponse<GetCommits200Response> localVarResponse = getCommitsWithHttpInfo(tableId, tableUri, startVersion, tableFullName, maxNumCommits);
    return localVarResponse.getData();
  }

  /**
   * List Delta Commits
   * List all the delta commits. 
   * @param tableId The table id of the table to commit to. (required)
   * @param tableUri The URI of the storage location of the table. (required)
   * @param startVersion The start version from which to retrieve commits (inclusive). (required)
   * @param tableFullName The table full name, currently only used for verification. (optional)
   * @param maxNumCommits The maximum number of commits to return in the response. Defaults to 50 if not provided. (optional)
   * @return ApiResponse&lt;GetCommits200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<GetCommits200Response> getCommitsWithHttpInfo(String tableId, String tableUri, Long startVersion, String tableFullName, Integer maxNumCommits) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getCommitsRequestBuilder(tableId, tableUri, startVersion, tableFullName, maxNumCommits);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getCommits", localVarResponse);
        }
        return new ApiResponse<GetCommits200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<GetCommits200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getCommitsRequestBuilder(String tableId, String tableUri, Long startVersion, String tableFullName, Integer maxNumCommits) throws ApiException {
    // verify the required parameter 'tableId' is set
    if (tableId == null) {
      throw new ApiException(400, "Missing the required parameter 'tableId' when calling getCommits");
    }
    // verify the required parameter 'tableUri' is set
    if (tableUri == null) {
      throw new ApiException(400, "Missing the required parameter 'tableUri' when calling getCommits");
    }
    // verify the required parameter 'startVersion' is set
    if (startVersion == null) {
      throw new ApiException(400, "Missing the required parameter 'startVersion' when calling getCommits");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/delta/commits";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "table_id";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("table_id", tableId));
    localVarQueryParameterBaseName = "table_full_name";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("table_full_name", tableFullName));
    localVarQueryParameterBaseName = "table_uri";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("table_uri", tableUri));
    localVarQueryParameterBaseName = "start_version";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("start_version", startVersion));
    localVarQueryParameterBaseName = "max_num_commits";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("max_num_commits", maxNumCommits));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

}
