/*
 * Unity Catalog API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.unitycatalog.client.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.unitycatalog.client.model.CommitInfo;
import io.unitycatalog.client.model.Metadata;
import io.unitycatalog.client.model.Protocol;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Commit
 */
@JsonPropertyOrder({
  Commit.JSON_PROPERTY_TABLE_ID,
  Commit.JSON_PROPERTY_TABLE_FULL_NAME,
  Commit.JSON_PROPERTY_TABLE_URI,
  Commit.JSON_PROPERTY_COMMIT_INFO,
  Commit.JSON_PROPERTY_LATEST_BACKFILLED_VERSION,
  Commit.JSON_PROPERTY_METADATA,
  Commit.JSON_PROPERTY_PROTOCOL
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.5.0")
public class Commit {
  public static final String JSON_PROPERTY_TABLE_ID = "table_id";
  private String tableId;

  public static final String JSON_PROPERTY_TABLE_FULL_NAME = "table_full_name";
  private String tableFullName;

  public static final String JSON_PROPERTY_TABLE_URI = "table_uri";
  private String tableUri;

  public static final String JSON_PROPERTY_COMMIT_INFO = "commit_info";
  private CommitInfo commitInfo;

  public static final String JSON_PROPERTY_LATEST_BACKFILLED_VERSION = "latest_backfilled_version";
  private Long latestBackfilledVersion;

  public static final String JSON_PROPERTY_METADATA = "metadata";
  private Metadata metadata;

  public static final String JSON_PROPERTY_PROTOCOL = "protocol";
  private Protocol protocol;

  public Commit() { 
  }

  public Commit tableId(String tableId) {
    this.tableId = tableId;
    return this;
  }

   /**
   * The table id of the table to commit to.
   * @return tableId
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TABLE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTableId() {
    return tableId;
  }


  @JsonProperty(JSON_PROPERTY_TABLE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTableId(String tableId) {
    this.tableId = tableId;
  }


  public Commit tableFullName(String tableFullName) {
    this.tableFullName = tableFullName;
    return this;
  }

   /**
   * The table full name, currently only used for verification.
   * @return tableFullName
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TABLE_FULL_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTableFullName() {
    return tableFullName;
  }


  @JsonProperty(JSON_PROPERTY_TABLE_FULL_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTableFullName(String tableFullName) {
    this.tableFullName = tableFullName;
  }


  public Commit tableUri(String tableUri) {
    this.tableUri = tableUri;
    return this;
  }

   /**
   * The URI of the storage location of the table.
   * @return tableUri
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TABLE_URI)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTableUri() {
    return tableUri;
  }


  @JsonProperty(JSON_PROPERTY_TABLE_URI)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTableUri(String tableUri) {
    this.tableUri = tableUri;
  }


  public Commit commitInfo(CommitInfo commitInfo) {
    this.commitInfo = commitInfo;
    return this;
  }

   /**
   * Get commitInfo
   * @return commitInfo
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COMMIT_INFO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CommitInfo getCommitInfo() {
    return commitInfo;
  }


  @JsonProperty(JSON_PROPERTY_COMMIT_INFO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCommitInfo(CommitInfo commitInfo) {
    this.commitInfo = commitInfo;
  }


  public Commit latestBackfilledVersion(Long latestBackfilledVersion) {
    this.latestBackfilledVersion = latestBackfilledVersion;
    return this;
  }

   /**
   * The highest version of the commits that have been backfilled for this table; meaning UC no longer needs to keep track of commits of versions &lt;&#x3D; this version.
   * @return latestBackfilledVersion
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LATEST_BACKFILLED_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getLatestBackfilledVersion() {
    return latestBackfilledVersion;
  }


  @JsonProperty(JSON_PROPERTY_LATEST_BACKFILLED_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLatestBackfilledVersion(Long latestBackfilledVersion) {
    this.latestBackfilledVersion = latestBackfilledVersion;
  }


  public Commit metadata(Metadata metadata) {
    this.metadata = metadata;
    return this;
  }

   /**
   * Get metadata
   * @return metadata
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_METADATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Metadata getMetadata() {
    return metadata;
  }


  @JsonProperty(JSON_PROPERTY_METADATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMetadata(Metadata metadata) {
    this.metadata = metadata;
  }


  public Commit protocol(Protocol protocol) {
    this.protocol = protocol;
    return this;
  }

   /**
   * Get protocol
   * @return protocol
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PROTOCOL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Protocol getProtocol() {
    return protocol;
  }


  @JsonProperty(JSON_PROPERTY_PROTOCOL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProtocol(Protocol protocol) {
    this.protocol = protocol;
  }


  /**
   * Return true if this Commit object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Commit commit = (Commit) o;
    return Objects.equals(this.tableId, commit.tableId) &&
        Objects.equals(this.tableFullName, commit.tableFullName) &&
        Objects.equals(this.tableUri, commit.tableUri) &&
        Objects.equals(this.commitInfo, commit.commitInfo) &&
        Objects.equals(this.latestBackfilledVersion, commit.latestBackfilledVersion) &&
        Objects.equals(this.metadata, commit.metadata) &&
        Objects.equals(this.protocol, commit.protocol);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tableId, tableFullName, tableUri, commitInfo, latestBackfilledVersion, metadata, protocol);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Commit {\n");
    sb.append("    tableId: ").append(toIndentedString(tableId)).append("\n");
    sb.append("    tableFullName: ").append(toIndentedString(tableFullName)).append("\n");
    sb.append("    tableUri: ").append(toIndentedString(tableUri)).append("\n");
    sb.append("    commitInfo: ").append(toIndentedString(commitInfo)).append("\n");
    sb.append("    latestBackfilledVersion: ").append(toIndentedString(latestBackfilledVersion)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `table_id` to the URL query string
    if (getTableId() != null) {
      joiner.add(String.format("%stable_id%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTableId()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `table_full_name` to the URL query string
    if (getTableFullName() != null) {
      joiner.add(String.format("%stable_full_name%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTableFullName()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `table_uri` to the URL query string
    if (getTableUri() != null) {
      joiner.add(String.format("%stable_uri%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTableUri()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `commit_info` to the URL query string
    if (getCommitInfo() != null) {
      joiner.add(getCommitInfo().toUrlQueryString(prefix + "commit_info" + suffix));
    }

    // add `latest_backfilled_version` to the URL query string
    if (getLatestBackfilledVersion() != null) {
      joiner.add(String.format("%slatest_backfilled_version%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getLatestBackfilledVersion()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `metadata` to the URL query string
    if (getMetadata() != null) {
      joiner.add(getMetadata().toUrlQueryString(prefix + "metadata" + suffix));
    }

    // add `protocol` to the URL query string
    if (getProtocol() != null) {
      joiner.add(getProtocol().toUrlQueryString(prefix + "protocol" + suffix));
    }

    return joiner.toString();
  }
}

